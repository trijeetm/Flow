{
  "name": "remarkable",
  "version": "1.3.0",
  "description": "Markdown parser, done right. Commonmark support, extensions, syntax plugins, high speed - all in one.",
  "keywords": [
    "markdown",
    "md",
    "commonmark",
    "parser"
  ],
  "homepage": "https://github.com/jonschlinkert/remarkable",
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/remarkable.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/remarkable/issues"
  },
  "license": "MIT",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "argparse": "~ 0.1.15",
    "autolinker": "~ 0.12.3",
    "coveralls": "^2.11.2"
  },
  "devDependencies": {
    "ansi": "^0.3.0",
    "autoprefixer-stylus": "^0.3.0",
    "benchmark": "^1.0.0",
    "browserify": "*",
    "eslint": "0.9.1",
    "eslint-plugin-nodeca": "^1.0.0",
    "istanbul": "*",
    "jade": "^1.6.0",
    "stylus": "^0.49.1",
    "mocha": "*",
    "uglify-js": "*"
  },
  "readme": "# remarkable\n\n[![Build Status](https://travis-ci.org/jonschlinkert/remarkable.svg?branch=master)](https://travis-ci.org/jonschlinkert/remarkable)\n[![NPM version](https://img.shields.io/npm/v/remarkable.svg)](https://www.npmjs.org/package/remarkable)\n[![Coverage Status](https://img.shields.io/coveralls/jonschlinkert/remarkable.svg)](https://coveralls.io/r/jonschlinkert/remarkable?branch=dev)\n\n> Markdown parser done right. Fast and easy to extend.\n\n__[Live demo](http://jonschlinkert.github.io/remarkable/demo/)__\n\n- Supports the [CommonMark](http://commonmark.org/) spec + extentions\n  (URL autolinking, typographer).\n- Configurable syntax! You can add new rules and even replace existing ones.\n- High speed! See the [benchmarks](./benchmark).\n\n\n## Install\n\n**node.js:**\n\n```bash\nnpm install remarkable --save\n```\n\n**bower:**\n\n```bash\nbower install remarkable --save\n```\n\n**browser (CDN):**\n\n- [jsDeliver CDN](http://www.jsdelivr.com/#!remarkable \"jsDelivr CDN\")\n\n\n## Usage\n\n```js\nvar Remarkable = require('remarkable');\nvar md = new Remarkable();\n\nconsole.log(md.render('# Remarkable rulezz!'));\n// => <h1>Remarkable rulezz!</h1>\n```\n\n\n### Options\n\nBy default remarkable is configured to be similar to GFM, but with HTML disabled.\nThis is easy to change if you prefer to use different settings.\n\nThere are two ways to define options.\n\n#### constructor\n\nDefine options in the constructor:\n\n```js\n// Actual default values\nvar md = new Remarkable({\n  html:         false,        // Enable HTML tags in source\n  xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n  breaks:       false,        // Convert '\\n' in paragraphs into <br>\n  langPrefix:   'language-',  // CSS language prefix for fenced blocks\n  linkify:      false,        // Autoconvert URL-like text to links\n  typographer:  false,        // Enable smartypants and other sweet transforms\n\n  // Highlighter function. Should return escaped HTML,\n  // or '' if the source string is not changed\n  highlight: function (/*str, lang*/) { return ''; }\n});\n\nconsole.log(md.render('# Remarkable rulezz!'));\n// => <h1>Remarkable rulezz!</h1>\n```\n\n#### .set\n\nOr define options via the `.set()` method:\n\n```js\nvar Remarkable = require('remarkable');\nvar md = new Remarkable();\n\nmd.set({\n  html: true,\n  breaks: true\n});\n```\n\n**Note:** To achieve the best possible performance, don't modify a `Remarkable`\ninstance on the fly. If you need multiple configurations it's best to create\nmultiple instances and initialize each with a configuration that is ideal for\nthat instance.\n\n\n### Presets\n\nRemarkable offers some \"presets\" as a convenience to quickly enable/disable\nactive syntax rules and options for common use cases.\n\n#### commonmark\n\nEnable strict [CommonMark](http://commonmark.org/) mode with the `commonmark` preset:\n\n```js\nvar Remarkable = require('remarkable');\nvar md = new Remarkable('commonmark');\n```\n\n#### full\n\nEnable all available rules (but still with default options, if not set):\n\n```js\nvar Remarkable = require('remarkable');\nvar md = new Remarkable('full');\n\n// Or with options:\nvar md = new Remarkable('full', {\n  html: true,\n  linkify: true,\n  typographer: true\n});\n```\n\n\n### Syntax highlighting\n\nApply syntax highlighting to fenced code blocks with the `highlight` option:\n\n```js\nvar Remarkable = require('remarkable');\nvar hljs       = require('highlight.js') // https://highlightjs.org/\n\n// Actual default values\nvar md = new Remarkable({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(lang, str).value;\n      } catch (err) {}\n    }\n\n    try {\n      return hljs.highlightAuto(str).value;\n    } catch (err) {}\n\n    return ''; // use external default escaping\n  }\n});\n```\n\n\n### Syntax extentions\n\nEnabled by default:\n\n- [Tables](https://help.github.com/articles/github-flavored-markdown/#tables) (GFM)\n- [\\<del>](https://help.github.com/articles/github-flavored-markdown/#strikethrough)\n  (GFM strikethrough) - `~~deleted text~~`\n\nDisabled by default:\n\n- [\\<sup](http://johnmacfarlane.net/pandoc/README.html#superscripts-and-subscripts) - `19^th^`\n- [\\<sub>](http://johnmacfarlane.net/pandoc/README.html#superscripts-and-subscripts) - `H~2~0`\n- __\\<ins>__ - `++inserted text++` (experimental)\n- __\\<mark>__ - `==marked text==` (experimental)\n\n__*__ Experimental extentions can be changed later for something like\n[Critic Markup](http://criticmarkup.com/), but you will still be able to use\nold-style rules via external plugins if you prefer.\n\n\n### Manage rules\n\n```js\nvar md = new Remarkable();\nmd.inline.ruler.enable([ 'ins', 'mark' ]);\nmd.block.ruler.disable([ 'table' ]);\n\n// Enable everything\nmd = new Remarkable('full', {\n  html: true,\n  linkify: true,\n  typographer: true,\n});\n```\n\n\n### Typographer\n\nAlthough full-weight typographical replacements are language specific, `remarkable`\nprovides coverage for the most common and universal use cases:\n\n```js\nvar Remarkable = require('remarkable');\nvar md = new Remarkable({ typographer: true });\n\n// Actual default values\nmd.typographer.set({\n  singleQuotes: '‘’', // set empty to disable\n  doubleQuotes: '“”', // set '«»' for Russian, '„“' for German, empty to disable\n  copyright:    true, // (c) (C) → ©\n  trademark:    true, // (tm) (TM) → ™\n  registered:   true, // (r) (R) → ®\n  plusminus:    true, // +- → ±\n  paragraph:    true, // (p) (P) -> §\n  ellipsis:     true, // ... → … (also ?.... → ?.., !.... → !..)\n  dupes:        true, // ???????? → ???, !!!!! → !!!, `,,` → `,`\n  dashes:       true  // -- → &ndash;, --- → &mdash;\n})\n```\n\nOf course, you can also add your own rules or replace the defaults with something\nmore advanced or specific to your language.\n\n\n### Plugins\n\nEasily load plugins with the `.use()` method:\n\n```js\nvar md = new Remarkable();\n\nmd.use(plugin1)\n  .use(plugin2, opts)\n  .use(plugin3);\n```\n\n\n## References / Thanks\n\nBig thanks to [John MacFarlane](https://github.com/jgm) for his work on the\nCommonMark spec and reference implementations. His work saved us a lot of time\nduring this project's development.\n\n**Related Links:**\n\n1. https://github.com/jgm/CommonMark - reference CommonMark implementations in C & JS,\n   also contains latest spec & online demo.\n2. http://talk.commonmark.org - CommonMark forum, good place to collaborate\n   developers' efforts.\n\n\n## Development / Modification\n\nParser consists of several responsibilities chains, filled with rules. You can\nreconfigure anyone as you wish. Render also can be modified and extended. See\nsource code to understand details. Pay attention to these properties:\n\n```js\nRemarkable.block\nRemarkable.block.ruler\nRemarkable.inline\nRemarkable.inline.ruler\nRemarkable.typographer\nRemarkable.typographer.ruler\nRemarkable.linkifier\nRemarkable.linkifier.ruler\nRemarkable.renderer\nRemarkable.renderer.rules\n```\n\n\n## Authors\n\n- Jon Schlinkert [github/jonschlinkert](https://github.com/jonschlinkert)\n- Alex Kocharin [github/rlidwka](https://github.com/rlidwka)\n- Vitaly Puzrin [github/puzrin](https://github.com/puzrin)\n\n\n## License\n\n[MIT](https://github.com/jonschlinkert/remarkable/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "remarkable@1.3.0",
  "dist": {
    "shasum": "4e73bc91cf2161940c92475bb5d5c8c631ef6b87"
  },
  "_from": "remarkable@^1.2.2",
  "_resolved": "https://registry.npmjs.org/remarkable/-/remarkable-1.3.0.tgz"
}
